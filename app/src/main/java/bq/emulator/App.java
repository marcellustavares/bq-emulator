/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bq.emulator;

import com.google.zetasql.Analyzer;
import com.google.zetasql.AnalyzerOptions;
import com.google.zetasql.LanguageOptions;
import com.google.zetasql.SimpleCatalog;
import com.google.zetasql.SimpleColumn;
import com.google.zetasql.SimpleTable;
import com.google.zetasql.TypeFactory;
import com.google.zetasql.ZetaSQLBuiltinFunctionOptions;
import com.google.zetasql.ZetaSQLOptions;
import com.google.zetasql.ZetaSQLType;
import com.google.zetasql.resolvedast.ResolvedNode;
import com.google.zetasql.resolvedast.ResolvedNodes;
import java.util.Arrays;
import java.util.List;

public class App {
    public String getGreeting() {
        String query = "SELECT * FROM `project_name`.dataset.table WHERE col='val';";
        //String query = "SELECT 1;";

        AnalyzerOptions options = new AnalyzerOptions();

        // Create our "master" catalog
        // You also need to register the built-in functions
        SimpleCatalog catalog = new SimpleCatalog("catalog");
        catalog.addZetaSQLFunctions(new ZetaSQLBuiltinFunctionOptions());

        // Create a catalog for the project and add it to the master catalog
        SimpleCatalog project = new SimpleCatalog("project_name");
        catalog.addSimpleCatalog(project);

        // Create a catalog for the dataset and add it to the project
        SimpleCatalog dataset = new SimpleCatalog("dataset");
        project.addSimpleCatalog(dataset);

        // Create our table and add it to the dataset
        List<SimpleColumn> columns = Arrays.asList(
            new SimpleColumn(
                "table",
                "col",
                TypeFactory.createSimpleType(ZetaSQLType.TypeKind.TYPE_STRING)
            )
        );
        SimpleTable table = new SimpleTable("table", columns);
        dataset.addSimpleTable(table);

        ResolvedNodes.ResolvedStatement resolvedStatement = Analyzer.analyzeStatement(
            query, options, catalog
        );


        resolvedStatement.accept(new ResolvedNodes.Visitor() {

            @Override
            public void visit(ResolvedNodes.ResolvedLiteral node) {
                System.out.println("Literal " +  node.getValue().toString());
                super.visit(node);
            }
        });

        System.out.println(resolvedStatement);

        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }
}
